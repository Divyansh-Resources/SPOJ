A number is said to be made up of non-decreasing digits if all the digits to the left of any digit is less than or equal to that digit.
For example, the four-digit number 1234 is composed of digits that are non-decreasing.  Some other four-digit numbers that are composed of non-decreasing digits are
 0011, 1111, 1112, 1122, 2223.  As it turns out, there are exactly 715 four-digit numbers composed of non-decreasing digits. 
 
Notice that leading zeroes are required: 0000, 0001, 0002 are all valid four-digit numbers with non-decreasing digits. 
 
For this problem, you will write a program that determines how many such numbers there are with a specified number of digits.

---------------------------------------


Let f(i, d) represent the number of numbers with i digits with the last digit at most d.

Then, there are 2 options for the i+1 th digit. Firstly, the (i + 1)th digit can be = d or it won't be d.

If it is d, then the rest is given by f(i - 1, d)

If it is not d, then it is given by f(i, d - 1)

So, f(i, d) = f(i, d - 1) + f(i - 1, d)

The answer for any given N is f(N, 9).

Precompute these N for all N up to 64 and then answer each query.

-------------------------------------------------

void get(vector <long long> &number_of_numbers)
{
    const int MAX_DIGITS = 64, MAX_DIGIT_VALUE = 9;
    long long no_of_numbers_with_last_digit[MAX_DIGITS + 1][MAX_DIGIT_VALUE + 1];

    for(int i = 1; i <= MAX_DIGITS; i++)
    {
        for(int last_digit = 0; last_digit <= MAX_DIGIT_VALUE; last_digit++)
        {
            if(i == 1 && last_digit == 0)
            {
                no_of_numbers_with_last_digit[i][last_digit] = 1;
            }
            else if(i == 1)
            {
                no_of_numbers_with_last_digit[i][last_digit] = no_of_numbers_with_last_digit[i][last_digit - 1] + 1;
            }
            else if(last_digit == 0)
            {
                no_of_numbers_with_last_digit[i][last_digit] = no_of_numbers_with_last_digit[i - 1][last_digit];
            }
            else
            {
                no_of_numbers_with_last_digit[i][last_digit] = no_of_numbers_with_last_digit[i][last_digit - 1] +
                                                                   no_of_numbers_with_last_digit[i - 1][last_digit];
            }
        }
        number_of_numbers[i] = no_of_numbers_with_last_digit[i][MAX_DIGIT_VALUE];
    }
}

int main()
{
    int no_of_test_cases;
    scanf("%d", &no_of_test_cases);

    const int MAX_DIGITS = 64;
    vector <long long> number_of_numbers(MAX_DIGITS + 1, 0);

    get(number_of_numbers);

    while(no_of_test_cases--)
    {
        int test_i, number_of_digits;
        scanf("%d %d", &test_i, &number_of_digits);

        printf("%d %lld\n", test_i, number_of_numbers[number_of_digits]);
    }
    return 0;
}

