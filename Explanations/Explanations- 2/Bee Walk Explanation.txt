A bee larva living in a hexagonal cell of a large honey comb decides to creep 
for a walk. In each “step” the larva may move into any of the six adjacent cells
and after n steps, it is to end up in its original cell.
Your program has to compute, for a given n, the number of different such larva walks.

---------------------------------------------------

This was very interesting. Learnt quite a few things. 

Initially, I wrote f(i, j) as the number of ways to reach the origin in exactly i steps from a tile at distance j from the origin.
It got a bit difficult as it was different for every layer.

f(n, 0) = 6.f(n - 1, 1)
f(n, 1) = 3f(n - 1, 2) + 2f(n - 1, 1) + f(n - 1, 0)

The number of hexagons doubles at every layer starting from the origin. It was getting messy. 

The problem vanishes when you know how to label the hexagonal coordinate system. 

Each hexagons is represented by 2 integers (x, y) ... Neighbours are (x - 1, y), (x - 1, y + 1), (x, y + 1), (x + 1, y), (x + 1, y - 1), (x, y - 1).
Now, it is very easy to write the transition state. f(n, x, y) = sum(f(n - 1, neighbour x, neighbour y))

Hexagonal lattices are sometimes used to store image pixels instead of square lattices. To put down two numbers on each lattice, we need to use a skewed axis system.

	A	B

C	    0	 	D

	E        F

Our goal is to label each point with two points. 
So, draw a y-axis that cuts through B, 0 and E.

Draw an x-axis that cuts through C, 0, and D.

	A	/B
     (-1, 1)   /(0, 1)
	      /
C------------/0------------D
(-1, 0)     /(0, 0)     (1, 0)
	   /
	E /	 F
     (0, -1)  (1, -1)   
			
Remember, f(0, Origin, Origin) = 1

---------------------------------------

Implementation details - 

1. Offset the origin by some amount. (25, 25) in my case to avoid the use of negative indices.
2. There are 6 neighbours for each cell. It is possible to write down all six neighbours in one line, but it is more elegant to use an array
that contains the offset to each neighbour. 

---------------------------------------------------

int main()
{
    const int ORIGIN_X = 25, ORIGIN_Y = 25, MAX_STEPS = 15, MAX_NEIGHBOURS = 6;
    int x_distance[MAX_NEIGHBOURS] = {-1, -1, 0, 1, 1, 0};
    int y_distance[MAX_NEIGHBOURS] = {0, 1, 1, 0, -1, -1};

    long long no_of_homecoming_walks[MAX_STEPS][2*ORIGIN_X][2*ORIGIN_Y] = {0};

    no_of_homecoming_walks[0][ORIGIN_X][ORIGIN_Y] = 1;

    for(int step = 1; step < MAX_STEPS; step++)
    {
        for(int x = 1; x < 2*ORIGIN_X; x++)
        {
            for(int y = 1; y < 2*ORIGIN_Y; y++)
            {
                for(int neighbour_no = 0; neighbour_no < MAX_NEIGHBOURS; neighbour_no++)
                {
                    int neighbour_x = x + x_distance[neighbour_no];
                    int neighbour_y = y + y_distance[neighbour_no];
                    no_of_homecoming_walks[step][x][y] += no_of_homecoming_walks[step - 1][neighbour_x][neighbour_y];
                }
            }
        }
    }

    int no_of_test_cases;
    scanf("%d", &no_of_test_cases);

    while(no_of_test_cases--)
    {
        int no_of_steps;
        scanf("%d", &no_of_steps);

        printf("%lld\n", no_of_homecoming_walks[no_of_steps][ORIGIN_X][ORIGIN_Y]);
    }

    return 0;
}