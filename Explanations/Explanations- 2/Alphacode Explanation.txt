Alice: “Let’s just use a very simple code: We’ll assign ‘A’ the code word 1, ‘B’ will be 2, and so on down to ‘Z’ being assigned 26.”

Bob: “That’s a stupid code, Alice. Suppose I send you the word ‘BEAN’ encoded as 25114. You could decode that in many different ways!”
Alice: “Sure you could, but what words would you get? Other than ‘BEAN’, you’d get ‘BEAAD’, ‘YAAD’, ‘YAN’, ‘YKD’ and ‘BEKD’. 
I think you would be able to figure out the correct decoding. And why would you send me the word ‘BEAN’ anyway?”

Bob: “OK, maybe that’s a bad example, but I bet you that if you got a string of length 5000 there would be tons of different decodings 
and with that many you would find at least two different ones that would make sense.”
Alice: “How many different decodings?”
Bob: “Jillions!”

For some reason, Alice is still unconvinced by Bob’s argument, so she requires a program that will 
determine how many decodings there can be for a given string using her code.

-------------------------------------------------

The basic logic is simple. However, the corner cases are tricky in this problem.

Let's say f(i) is the number of ways of interpreting the code.

f(0) = 1, for convenience.

We add a digit at the end. If this digit is a valid 1-digit code, then f(i + 1) = f(i), 

If the last digit forms a valid, two digit code with the second last number, then f(i + 1) = f(i) + f(i - 1).

The corner case is when there is a 0.

If 0 is the first digit, there is no way of interpreting the code.

If 0 occurs at any point in the string, not preceeded by 1 or 2, there is no way of interpreting the code.

If 0 follows either a 1 or a 0, then the number of interpretations f(i) = f(i - 2).

--------------------------------------------------------------

void solve(string &code)
{
    typedef unsigned int u_int;
    vector <long long> no_of_codes_till(code.size() + 1, 0);

    no_of_codes_till[0] = 1;
    for(u_int i = 1; i <= code.size(); i++)
    {
        if(i == 1)
        {
            if(code[i - 1] == '0')
                break;

            no_of_codes_till[i] = 1;
        }
        else
        {
            int last_digit = code[i - 1] - '0', second_last_digit = code[i - 2] - '0';

            int last_two_digits = 10*second_last_digit + last_digit;

            if(last_digit == 0)
            {
                if(second_last_digit == 1 || second_last_digit == 2)
                    no_of_codes_till[i] = no_of_codes_till[i - 2];
                else
                    break;
            }
            else
            {
                no_of_codes_till[i] = no_of_codes_till[i - 1] + (last_two_digits >= 10 && last_two_digits <= 26 ? no_of_codes_till[i - 2] : 0);
            }
        }
    }
    printf("%lld\n", no_of_codes_till[code.size()]);
}

