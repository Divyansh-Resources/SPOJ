
Given an integer N, the number N is called “Psycho Number” . Psycho Number is calculated as follows:

First, If we factorize N , then we have some prime and their power. Assume that, there are M powers. From M powers , you should count the number of even and odd powers. 
Then if the number of even power is strictly greater than odd power , then we call the number N is “Psycho Number”, otherwise the number N is call “Ordinary Number”.

As for example, if N = 67500 then prime factorization, 

67500 = 22 x 33 x 54. 

Count even powers and odd powers . This number have 2 even power(2,4) and 1 odd power ( 3 ). Since even power 2 (2,4) is greater than odd power 1 (3), 
so the number 67500 is a Psycho Number.

-------------------------------------------------------

Factorising all integers for each test case O(t root(n)) can go up to 10^9 operations. That will not pass.

Precompute using a sieve and then answer each query in O(1) time. This is O(N log N + T), which will pass.

How to precompute using a sieve ?

Keep track of the largest prime factor of every integer n. (If it is 0, then it means n is prime)

Let n = p^a . n', where p and n' are coprime.

if a is even, then no of even exponents (n) = 1 + no of even exponents(n') and no of odd exponents(n) = no of odd exponents (n')


So for each number from 2 to n. Check if n is prime and mark all of it's multiples with itself as the largest prime factor.

After getting a number's largest prime factor, find n' such that, n' . p^a = n

Then use the parity of a and exponents(n') to calculate exponents(n).

Now each query can be answered in O(1) time.

1 and 0 have no prime divisors and are considered ordinary numbers. No need to seperately handle this since, we have initalised even and odd exponents to 0
so it will not turn out to be a psycho number.

----------------------------------------------------------

const int LIMIT = 1e7 + 1, ODD = 1, EVEN = 0;

int no_of_exponents[LIMIT][2];
int largest_prime_factor[LIMIT] = {0};

void precompute()
{
    for(int i = 2; i < LIMIT; i++)
    {
        if(largest_prime_factor[i] == 0)
        {
            for(int multiple = i; multiple < LIMIT; multiple += i)
                largest_prime_factor[multiple] = i;
        }

        int p = largest_prime_factor[i];
        int reduced_i = i, exponent_p = 0;

        while(reduced_i%p == 0)
        {
            reduced_i /= p;
            exponent_p++;
        }

        no_of_exponents[i][ODD] = no_of_exponents[reduced_i][ODD] + (exponent_p%2 == 1);
        no_of_exponents[i][EVEN] = no_of_exponents[reduced_i][EVEN] + (exponent_p%2 == 0);
    }
}

int main()
{
    precompute();

    int no_of_test_cases;
    scanf("%d", &no_of_test_cases);

    while(no_of_test_cases--)
    {
        int n;
        scanf("%d", &n);

        printf("%s\n", no_of_exponents[n][EVEN] > no_of_exponents[n][ODD] ? "Psycho Number" : "Ordinary Number");
    }

    return 0;
}