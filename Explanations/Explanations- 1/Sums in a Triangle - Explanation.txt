Let's consider a triangle of numbers in which a number appears in the first line, two numbers appear in the second line, three in the third line, etc. 
Develop a program which will compute the largest of the sums of numbers that appear on the paths starting from the top towards the base, so that:

on each path the next number is located on the row below, more precisely either directly below or below and one place to the right;
the number of rows is strictly positive, but less than 100
all numbers are positive integers between O and 99.

---------------------------------------------------------------

Project Euler had a very similar question and Levitin had a similar question in his book on Algorithmic Puzzles. 
This requires a DP.

For each T(i, j) store the maximum sum that is possible starting from (i, j) going down. 

Max_sum_from_here(i, j) = T(i, j), if i = n i.e. last row the max sum possible is the element itself
                        
                        = T(i, j) + max{ max_sum_from_here(i + 1, j), max_sum_from_here(i + 1, j + 1) }, otherwise

This algorithm works because we're going from the bottom to the top and we're being greedy while we're doing it. 

-----------------------------------------------------------------------

    int triangle[NUMBER_OF_ROWS][NUMBER_OF_COLUMNS], i, j, max_sum_starting_here[NUMBER_OF_ROWS][NUMBER_OF_COLUMNS] = {{0}}, number_of_rows;
    scanf("%d", &number_of_rows);

    for(i = 1; i <= number_of_rows; i++)
        for(j = 1; j <= i; j++)
            scanf("%d", &triangle[i][j]);

    //Initialising the last row
    for(i = 1; i <= number_of_rows; i++)
        max_sum_starting_here[number_of_rows][i] = triangle[number_of_rows][i];

    for(i = number_of_rows - 1; i >= 1; i--)
    {
        for(j = 1; j <= i; j++)
        {
            max_sum_starting_here[i][j] =triangle[i][j] + max(max_sum_starting_here[i + 1][j], max_sum_starting_here[i + 1][j + 1]);
        }
    }

    printf("%d\n", max_sum_starting_here[1][1]);

