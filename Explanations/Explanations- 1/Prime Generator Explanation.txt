
-------------------------------------

Usually, I solve problems on prime generation by precomputing all primes in the given range and then outputing true or false ...

It is not possible in this problem because the constraint is 1e9 and a vector can't be more than 1e6.

To check if a number is prime, it is sufficient to check if it is divisible by any number from 2 till it's square root.
It can be further optimised to check if it is divisible by any PRIME number from 2 till it's square root.


So, what I did was precompute all primes till the square root of 1e9. I didn't want the exact square root but I know it lies in between 1e4 and 1e5 so I 
precomputed all primes till 1e5 using a Sieve. 

After that for every i in the range, if i is less than 1e5 ---- Use the precomputation and check if it is prime.
If it is greater than 1e5, check if it is divisible by any prime number less than it's square root ... If it is not, then it means it is a prime number !
Because a number cannot have two factors greater than it's square root.

-------------------------------------------------------------------------------

void precompute_primes()
{

    is_prime[0] = is_prime[1] = false;

    for(int i = 2; i < 1e5; i++)
    {
        if(is_prime[i])
        {
            for(int multiple = 2*i; multiple <= 1e5; multiple += i)
            {
                is_prime[multiple] = false;
            }
            primes.push_back(i);
        }
    }
}

-----------------------------------

bool number_is_prime(int n)
{
    //If n has no factors less than it's square root, it has no factors other than 1 and itself
    for(int p = 0; primes[p]*primes[p] <= n; p++)
        if(n%primes[p] == 0)
            return false;

    return true;
}

---------------------------------------

void solve()
{
    int left, right;
    scanf("%d %d", &left, &right);

    for(int i = left; i <= right; i++)
    {
        if(i <= 1e5)
        {
            if(is_prime[i])
                printf("%d\n",i);
        }
        else
        {
            if(number_is_prime(i))
                printf("%d\n", i);
        }
    }
    printf("\n");
}

---------------------------------------------

